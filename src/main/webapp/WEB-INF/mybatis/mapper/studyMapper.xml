<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="study">
	<!-- 검색 조건 -->
	<sql id="where-list">		
		<if test="condition=='all'">
			(INSTR(studyName, #{keyword}) &gt; 0
			OR INSTR(studyIntro, #{keyword}) &gt; 0)
		</if>
		<if test="condition=='studyName'">
			INSTR(studyName, #{keyword}) &gt; 0
		</if>
		<if test="condition=='userId'">
			INSTR(userId, #{keyword}) &gt; 0
		</if>
		<if test="condition=='categoryName'">
			INSTR(categoryName, #{keyword}) &gt; 0
		</if>
		<if test="condition=='courseName'">
			INSTR(courseName, #{keyword}) &gt; 0
		</if>
	</sql>
	

	<!-- 스터디 번호 만들기 -->
	<select id="maxStudyNum" resultType="Integer">
		SELECT IFNULL(max(studyNum), 0) FROM study
	</select>
		
	<!-- 스터디 생성 -->
	<insert id="insertStudy" parameterType="com.sp.study.Study">
		INSERT INTO study(studyNum, studyName, studyIntro, userId, studyLocation, 
								studySday, studyEday, studyImg, headcount)
		VALUES(#{studyNum}, #{studyName}, #{studyIntro}, #{userId}, #{studyLocation}, 
								#{studySday}, #{studyEday}, #{studyImg}, #{headcount})
	</insert>
	
	<!-- 스터디 생성시 스터디의 과목 선택 -->
	<insert id="insertStudyCourse" parameterType="com.sp.study.StudyCourse">
		INSERT INTO studyCourseList(studyNum, courseNum)
		VALUES(#{studyNum}, #{courseNum})	
	</insert>
	
	<!-- 스터디 가입신청 -->
	<insert id="applyStudy" parameterType="com.sp.study.ApplyStudy">
		INSERT INTO applyStudy(studyNum, userId, goal, hope) 
		VALUES(#{studyNum}, #{userId}, #{goal}, #{hope})	
	</insert>
	
	
	<!-- 스터디 리스트 가져오기 -->
	<select id="listStudy" parameterType="map" resultType="com.sp.study.Study">
		SELECT DISTINCT s.studyNum, studyName, studyIntro, aps.userId, 
			studyLocation, studySday, studyEday, studyImg, headcount,
	        categoryName, color
		FROM study AS s 
		LEFT OUTER JOIN studyCourseList AS l
		ON l.studyNum = s.studyNum 
		left outer join course AS c
		ON l.courseNum = c.courseNum
		left outer join category AS ca
		ON c.categoryNum = ca.categoryNum
		left outer join applystudy AS aps
		on s.studyNum = aps.studyNum
		
		<where>
			lectureNum IS null		
			
			<if test="userId != null and userId != ''">
				AND (aps.userId = #{userId} AND approval = 2)
			</if>
			
			<if test="mode != 'allStudy'">
				AND categoryName = #{categoryName}
			</if>			
			
			<if test="keyword != null and keyword != ''">
				AND <include refid="where-list"/>
			</if>		
		</where>		
		
		ORDER BY studyNum DESC
		LIMIT #{start}, #{rows}
	</select>
	
	<!-- 스터디 개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT IFNULL(count(DISTINCT s.studyNum), 0) FROM study as s 
		left outer join studyCourseList as l
		on l.studyNum = s.studyNum 
		left outer join course as c
		on l.courseNum = c.courseNum
		left outer join category as ca
		on c.categoryNum = ca.categoryNum
		left outer join applystudy AS aps
		on s.studyNum = aps.studyNum
		
		<where>
			lectureNum IS null
			
			<if test="userId != null and userId != ''">
				AND (aps.userId = #{userId} AND approval = 2)
			</if>
			
			<if test="mode != 'allStudy'">
				AND categoryName = #{categoryName}
			</if>
			
			<if test="keyword != null and keyword != ''">
				AND <include refid="where-list"/>
			</if>		
		</where>
	
	</select>
	
	<!-- 스터디 읽어오기 -->
	<select id="readStudy" parameterType="map" resultType="com.sp.study.Study">
		SELECT DISTINCT s.studyNum, studyName, studyIntro, s.userId, nickname,
				studyLocation, 
				DATE_FORMAT(studySday, '%Y-%m-%d') AS studySday, DATE_FORMAT(studyEday, '%Y-%m-%d') AS studyEday, 
				studyImg, headcount 
		FROM study as s 
		left outer join studyCourseList as l
		on l.studyNum = s.studyNum 
		left outer join course as c
		on l.courseNum = c.courseNum
		left outer join category as ca
		on c.categoryNum = ca.categoryNum
		left outer join memberInfo as m
		on s.userId = m.userId
		where s.studyNum = #{studyNum}	
	</select>
	
	<!-- 스터디의 과목 읽어오기-->
	<select id="listStudyCourse" parameterType="Integer" resultType="com.sp.study.StudyCourse">
		SELECT s.studyNum, c.courseName  FROM study as s 
		left outer join studyCourseList as l
		on l.studyNum = s.studyNum 
		left outer join course as c
		on l.courseNum = c.courseNum
		WHERE s.studyNum = #{studyNum}
	</select>
	
	<!-- 스터디 수정 -->
	<update id="updateStudy" parameterType="com.sp.study.Study">
		update study set studyName = #{studyName}, studyIntro= #{studyIntro},
				studyLocation = #{studyLocation}, studySday= #{studySday}, studyEday = #{studyEday},
                studyImg= #{studyImg}, headcount = #{headcount}
		where studyNum = #{studyNum}
	</update>
	
	<!-- 스터디 삭제 -->
	<delete id="deleteStudy" parameterType="Integer">
		delete from study where studyNum = #{studyNum}
	</delete>
	
	
	<!-- 스터디 인원 (승인 : 2) -->
	<select id="headCount" parameterType="Integer" resultType="Integer">
		SELECT IFNULL(count(DISTINCT userId), 0) 
		FROM applystudy WHERE studyNum = #{studyNum} AND approval = 2;
	</select>
	
	
	
	<!-- 분류 가져오기 -->
	<select id="listCategory" resultType="com.sp.study.Category">
		SELECT categoryNum, categoryName FROM category
	</select>
   
   <!-- 과목 가져오기 -->
	<select id="listCourse" parameterType="Integer" resultType="com.sp.study.Category">
		SELECT courseNum, categoryNum, courseName FROM course WHERE categoryNum=#{categoryNum}
	</select>

</mapper>